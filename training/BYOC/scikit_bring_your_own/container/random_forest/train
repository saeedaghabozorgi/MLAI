#!/usr/bin/env python

# A sample training component that trains a simple scikit-learn decision tree model.
# This implementation works in File mode and makes no assumptions about the input file names.
# Input is specified as CSV with a data point in each row and the labels in the first column.

from __future__ import print_function

import os
import json
import pickle
import sys
import traceback
from sklearn.ensemble import RandomForestRegressor
from sklearn.externals import joblib
import pandas as pd
import numpy as np

from sklearn import tree

# These are the paths to where SageMaker mounts interesting things in your container.

prefix = '/opt/ml/'

input_path = prefix + 'input/data'
output_path = os.path.join(prefix, 'output')
model_path = os.path.join(prefix, 'model')
param_path = os.path.join(prefix, 'input/config/hyperparameters.json')

# This algorithm has a single channel of input data called 'training'. Since we run in
# File mode, the input files are copied to the directory specified here.
channel_name='training'
training_path = os.path.join(input_path, channel_name)

# The function to execute the training.
def train():
    print('Starting the training.')
    try:
        # Read in any hyperparameters that the user passed with the training job
        with open(param_path, 'r') as tc:
            trainingParams = json.load(tc)

        print('reading data')
        train_df = pd.read_csv(os.path.join(training_path, 'boston_train.csv'))
        test_df = pd.read_csv(os.path.join(training_path, 'boston_train.csv'))
        
        features = trainingParams.get('features', None)
        target = trainingParams.get('target', None)
        
        print('building training and testing datasets')
        X_train = train_df[features.split()]
        X_test = test_df[features.split()]
        y_train = train_df[target]
        y_test = test_df[target]
        
        # train
        print('training model')
        model = RandomForestRegressor(
            n_estimators=10,
            min_samples_leaf=3,
            n_jobs=-1)

        model.fit(X_train, y_train)

        # print abs error
        print('validating model')
        abs_err = np.abs(model.predict(X_test) - y_test)

        # print couple perf metrics
        for q in [10, 50, 90]:
            print('AE-at-' + str(q) + 'th-percentile: '
                  + str(np.percentile(a=abs_err, q=q)))

        # persist model
        path = os.path.join(model_path, "model.joblib")
        joblib.dump(model, path)
        print('model persisted at ' + path)
        
    except Exception as e:
        # Write out an error file. This will be returned as the failureReason in the
        # DescribeTrainingJob result.
        trc = traceback.format_exc()
        with open(os.path.join(output_path, 'failure'), 'w') as s:
            s.write('Exception during training: ' + str(e) + '\n' + trc)
        # Printing this causes the exception to be in the training job logs, as well.
        print('Exception during training: ' + str(e) + '\n' + trc, file=sys.stderr)
        # A non-zero exit code causes the training job to be marked as Failed.
        sys.exit(255)

if __name__ == '__main__':
    train()

    # A zero exit code causes the job to be marked a Succeeded.
    sys.exit(0)
